# -*- coding: utf-8 -*-
"""IRIS Classification using LogisticRegression and Decision tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17yFpCHDquIQRRPTN310L8RXTd3dooOT9
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/IRIS.csv')

df.head(10)

df.tail(10)

df.shape

df.info(15)

df.describe()

a=df['sepal_length']
plt.plot(a)

b=df['petal_width']
c=df['petal_length']
plt.scatter(b,c)

d=df['species']
plt.hist(d)

A=df['sepal_width']
plt.bar(A,width=100,height=100)

B=df['sepal_length']
plt.pie(B)

q=df['species']
w=df['sepal_width']
sns.lineplot(x=q,y=w,data=df)

e=df['species']
r=df['sepal_width']
sns.scatterplot(x=e,y=r,data=df)

t=df['sepal_length']
y=df['species']
sns.barplot(x=t,y=y,data=df)

sns.countplot(x='species',data=df)

sns.pairplot(df,hue='sepal_width')

x=[12,34,65,76,678,465]
y=[20,30.40,60,70,90]
sns.distplot(x,y)

df.isnull().sum()

Z=df['petal_width']
sns.boxplot(Z)

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()

B=df['species']
B

df['species']=le.fit_transform(b)

a=df.drop('species',axis=1)
a

b=df['species']
b

from sklearn.model_selection import train_test_split

a_train,a_test,b_train,b_test=train_test_split(a,b,test_size=0.20,random_state=0)

a_train.shape

a_test.shape

from sklearn.preprocessing import StandardScaler

x=StandardScaler()
a_train=x.fit_transform(a_train)
a_train

from sklearn.tree import DecisionTreeClassifier
clf1=DecisionTreeClassifier()

clf1.fit(a_train,b_train)

pred=clf1.predict(a_test)

from sklearn.metrics import accuracy_score

accuracy_score(pred,b_test)

from sklearn.metrics import confusion_matrix

confusion_matrix(pred,b_test)

from sklearn.tree import export_graphviz
import graphviz

graphviz.Source(export_graphviz(clf1,feature_names=a.columns,filled=True))

from sklearn.linear_model import LogisticRegression

clf2=LogisticRegression()
clf2.fit(a_train,b_train)

pred=clf2.predict(a_test)

from sklearn.metrics import accuracy_score

accuracy_score(pred,b_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(pred,b_test)